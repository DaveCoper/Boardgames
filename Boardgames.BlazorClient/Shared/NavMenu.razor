@using Boardgames.Client.ViewModels
@using Boardgames.Client.ViewModels.NinthPlanet
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject MainViewModel mainVm

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Boardgames.Web</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        @foreach (var menuItem in mainVm.Screens)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="@GetLink(menuItem)" Match="GetMatch(menuItem)">
                    <span class="@GetClass(menuItem)" aria-hidden="true"></span> @menuItem.Title
                </NavLink>
            </li>
        }
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            await mainVm.LoadDataAsync();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private string GetLink(ContentViewModel screen)
    {
        switch (screen)
        {
            case HomeViewModel home:
                return string.Empty;

            case CreateGameViewModel createGameViewModel:
                return "creategame";

            case GameBrowserViewModel gameBrowserViewModel:
                return "gamebrowser";

            case NinthPlanetScreenViewModel ninthPlanet:
                return $"ninthplanet/{ninthPlanet.GameId}";

            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private NavLinkMatch GetMatch(ContentViewModel screen)
    {
        switch (screen)
        {
            case GameBrowserViewModel gameBrowserViewModel:
                return NavLinkMatch.Prefix;

            default:
                return NavLinkMatch.All;
        }
    }


    private string GetClass(ContentViewModel screen)
    {
        switch (screen)
        {
            case HomeViewModel home:
                return "oi oi-home";

            case CreateGameViewModel createGameViewModel:
                return "oi oi-plus";

            case GameBrowserViewModel gameBrowserViewModel:
                return "oi oi-list";

            default:
                return "oi oi-list";
        }
    }
}