@page "/ninthplanet/{gameId:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Boardgames.Client.ViewModels.NinthPlanet
@using Boardgames.Client.Services
@using Boardgames.Client.Brookers
@using Boardgames.NinthPlanet.Models
@using Boardgames.BlazorClient.Components.NinthPlanet
@using Boardgames.BlazorClient.Extensions
@inject IGameInfoService gameInfoService
@inject Func<int, int, GameState, NinthPlanetScreenViewModel> screenVmFactory
@inject ISignalRBrooker signalRBroker
@attribute [Authorize]

@if (ScreenVm == null)
{
    <h1>Loading ...</h1>
}
else
{
    @if (ScreenVm.CurrentView is RoundViewModel roundViewModel)
    {
        <GameView RoundViewModel="roundViewModel" />
    }
    else if (ScreenVm.CurrentView is LobbyViewModel lobbyViewModel)
    {
        <LobbyView LobbyViewModel="lobbyViewModel" />
    }
    else
    {
        <p>Something went wrong!</p>
    }
}

@code{
    [Parameter]
    public int GameId { get; set; }

    public NinthPlanetScreenViewModel ScreenVm { get; set; }

    protected override async Task OnInitializedAsync()
    {

        try
        {
            //forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
            var gameInfo = await gameInfoService.GetGameInfoAsync(GameId);
            await signalRBroker.ConnectAsync();
            var vm = screenVmFactory(gameInfo.OwnerId, GameId, null);
            await vm.LoadDataAsync();
            ScreenVm = vm;

            vm.UpdateOnPropertyChanged(this.StateHasChanged);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}