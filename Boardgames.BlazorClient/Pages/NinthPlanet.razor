@page "/ninthplanet/{gameId:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Boardgames.Client.ViewModels
@using Boardgames.Client.ViewModels.NinthPlanet
@using Boardgames.Client.Factories
@using Boardgames.Client.Services
@using Boardgames.Client.Brookers
@using Boardgames.NinthPlanet.Models
@using Boardgames.BlazorClient.Components.NinthPlanet
@using Boardgames.BlazorClient.Extensions
@inject MainViewModel mainVm
@inject INinthPlanetScreenViewModelFactory vmFactory
@attribute [Authorize]

@if (ScreenVm == null)
{
    <h1>Loading ...</h1>
}
else
{
    @if (ScreenVm.CurrentView is RoundViewModel roundViewModel)
    {
        <GameView RoundViewModel="roundViewModel" />
    }
    else if (ScreenVm.CurrentView is LobbyViewModel lobbyViewModel)
    {
        <LobbyView LobbyViewModel="lobbyViewModel" />
    }
    else
    {
        <p>Something went wrong!</p>
    }
}

@code{
    [Parameter]
    public int GameId { get; set; }

    public NinthPlanetScreenViewModel ScreenVm { get; set; }

    protected override async Task OnInitializedAsync()
    {

        try
        {
            var vm = mainVm.Screens.OfType<NinthPlanetScreenViewModel>().FirstOrDefault(x => x.GameId == this.GameId);
            if (vm == null)
            {
                vm = vmFactory.CreateInstance(GameId);
                mainVm.Screens.Add(vm);
            }

            mainVm.ActiveScreen = vm;

            await vm.LoadDataAsync();
            vm.UpdateOnPropertyChanged(this.StateHasChanged);

            this.ScreenVm = vm;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}